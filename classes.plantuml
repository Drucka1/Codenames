@startuml classe

class ImageCard implements Card {
    - String url

    + ImageCard(String url)
    + String getUrl()
}

class TextCard implements Card {
    - String url

    + ImageCard(String url)
    + String getUrl()
}

class PlayableCard {
    - Boolean guessed

    + Card(CardType cardType)
    + void guessed()
    + Boolean isGuessed()
    + CardType getCardType()
    + Color getColor()
}

PlayableCard o--- CardType
PlayableCard o--- Card

enum CardType {
    Black
    White
    Red
    Blue
}

interface Deck {
    - int size

    + List<PlayableCard> getCard()
    + List<PlayableCard> getRemainingCards()
    + List<PlayableCard> getRemainingCardsByType(CardType type)
    + List<PlayableCard> getRemainingRedCards()
    + List<PlayableCard> getRemainingBlueCards()

}

class DeckTwoTeams implements Deck {
    - List<PlayableCard> cards

    + DeckTwoTeams(List<PlayableCard> listCard)
    + List<PlayableCard> getCard()
    + int size()
}

class DeckSinglePlayer implements Deck {
    - List<PlayableCardWithHints> cards

    + DeckSinglePlayer(List<PlayableCardWithHints> listCard)
    + List<PlayableCard> getCard()
    + int size()
}

DeckTwoTeams o-- "*" PlayableCard

DeckSinglePlayer o-- "*" PlayableCardWithHints

PlayableCard -o PlayableCardWithHints

class PlayableCardWithHints {
    - PlayableCard playableCard
    - List<String> hints

    + PlayableCardWithHints(PlayableCard card, List<String> hints)
    + PlayableCard getPlayableCard()
    + List<String> getHints()
}

interface InterfaceGameController {
    + void initialize()
    - {abstract} void processCardSelection(PlayableCard card)
    - void alertWrongGuess(String message)
    + {abstract} void handleButton()
}

abstract class GameController implements InterfaceGameController {
    - Game game
    - BlitzModeController blitzModeController  // Nouvelle référence

    + GameController()
    + GameController(Game game)
}

class GameSinglePlayerController extends GameController {
    - AI AllyAI
    - AI OpponentAI

    + void setAllyAI(AI allyAI)
    + void setOpponentAI(AI opponentAI)
    + AI getAllyAI()
    + AI getOpponentAI()
}

class GameTwoTeamsController extends GameController {
    - Optional<String> askForNumberGuess()
}

abstract class BlitzModeController implements InterfaceGameController {
    - LoadingBarController loadingBarController

    + handleTimerEnd()
}


BlitzModeController o- GameController

class BlitzSinglePlayerController extends BlitzModeController {
    
}

BlitzSinglePlayerController o--- GameSinglePlayer

class BlitzTwoTeamsController extends BlitzModeController {

}

BlitzTwoTeamsController o--- GameTwoTeams
abstract class Game {
    - int id
    - Boolean onGoing
    - int cols
    - Statistics blueStat,redStat
    - Boolean blueTurn
    - int remainingCardGuess
    
    + Game(int cols, int numberOfBlueCard, int numberOfRedCard)

    + int getCols()
    + int getId()
    + void ends()
    + Boolean isOnGoing()
    + Statistics getBlueStatistics()
    + Statistics getRedStatistics()
    + int getRemainingCardGuess()
    + void setRemainingCardGuess(int remainingCardGuess)
    + {abstract} Deck getCard()
    + Boolean isBlueTurn()
    + CardType getColorTurn()
    + void changeTurn(int remainingCardGuess)
    + void correctGuess()
    + void wrongGuess()
    + int getNumberOfOpponentRemainingCardsToFind()
    + int getNumberOfRemainingCardsToFind()

}

class GameTwoTeams extends Game {
    - Image QRCode

    + Image getQRCode()
    + void setQRCode()
    + generateColorsString()
    + String generateURL()
    + void generateQRCode()
}

class GameSinglePlayer extends Game {
    - DeckSinglePlayer deck

    + GameSinglePlayer(DeckSinglePlayer deck, int cols, int numberOfBlueCard, int numberOfRedCard)
    + DeckSinglePlayer getDeck()
}

GameTwoTeamsController o--- GameTwoTeams

GameSinglePlayerController o--- GameSinglePlayer

GameSinglePlayer o--- DeckSinglePlayer

GameTwoTeams o--- DeckTwoTeams

Game o-- "2" Statistics

class Statistics {
    - double averageTimePerTurn
    - double averageCardsPerTurn
    - int numberOfErrors
    - int numberOfTurns
    - int numberOfGuess
    - int numberOfRemainingCardsToFind

    + Statistics(int numberOfCard)
    + int getNumberOfRemainingCardsToFind()
    + void decrNumberOfRemainingCardsToFind()
    + double getAverageTimePerTurn()
    + double getAverageCardsPerTurn()
    + int getNumberOfErrors()
    + void incrNumberOfErrors()
    + int getNumberOfTurns()
    + void incrNumberOfTurns()
    + void incrNumberOfGuess()
    + String toString() 
    + void calculStat()

}

abstract class AI {
    + GameController gameController
    - AI(GameController gameController)
    - {abstract} void play()
}

abstract class AllyAI extends AI {
    + AllyAI(GameController gameController)
}

abstract class OpponentAI extends AI {
    - Random random
    + OpponentAI(GameController gameController)
}

class EasyAllyAI extends AllyAI {
    + EasyAllyAI(GameController gameController)
}

class MediumAllyAI extends AllyAI {
    + MediumAllyAI(GameController gameController)
}


class HardAllyAI extends AllyAI {
    + HardAllyAI(GameController gameController)
}

class EasyOpponentAI extends OpponentAI {
    + EasyOpponentAI(GameController gameController)
}

class MediumOpponentAI extends OpponentAI {
    + MediumOpponentAI(GameController gameController)
}

class HardOpponentAI extends OpponentAI {
    + HardOpponentAI(GameController gameController)
}

Game -- AI
@enduml
