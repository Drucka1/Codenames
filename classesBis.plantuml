@startuml classes

interface Card {
    
}

class TextCard implements Card {
    - String text

    + TextCard(String text)
    + String getText()
}

class ImageCard implements Card {
    - String url

    + ImageCard(String url)
    + String getUrl()
}

class PlayableCard  {
    - Boolean guessed

    + Card(CardType cardType)
    + void guessed()
    + Boolean isGuessed()
    + CardType getCardType()
    + Color getColor()
}

PlayableCard o-- CardType
PlayableCard o-- Card

enum CardType {
    Black
    White
    Red
    Blue
}

GameTwoTeams o-- "*" PlayableCard

GameSinglePlayer o-- "*" PlayableCardWithHints


class PlayableCardWithHints extends PlayableCard{
    - List<String> hints
}

interface InterfaceGameController {
    + void initialize()
    - {abstract} void processCardSelection(PlayableCard card)
    - void alertWrongGuess(String message)
    + {abstract} void handleButton()
}

abstract class GameController implements InterfaceGameController {
    - Game game
    - BlitzModeController blitzModeController  // Nouvelle référence

    + GameController()
    + GameController(Game game)
}

class GameSinglePlayerController extends GameController {
    
}

class GameTwoTeamsController extends GameController {
    - Optional<String> askForNumberGuess()
}

abstract class BlitzModeController implements InterfaceGameController {
    - LoadingBarController loadingBarController

    + handleTimerEnd()
}

BlitzModeController o- GameController

class BlitzSinglePlayerController extends BlitzModeController {
    
}

BlitzSinglePlayerController o--- GameSinglePlayer

class BlitzTwoTeamsController extends BlitzModeController {

}

BlitzTwoTeamsController o--- GameTwoTeams

abstract class Game {
    - int id
    - Boolean onGoing
    - int cols
    - Statistics blueStat, redStat
    - Boolean blueTurn
    - int remainingCardGuess
    
    + Game(int cols, int numberOfBlueCard, int numberOfRedCard)

    + int getCols()
    + int getId()
    + void ends()
    + Boolean isOnGoing()
    + Statistics getBlueStatistics()
    + Statistics getRedStatistics()
    + int getRemainingCardGuess()
    + void setRemainingCardGuess(int remainingCardGuess)
    + {abstract} Deck getCard()
    + Boolean isBlueTurn()
    + CardType getColorTurn()
    + void changeTurn(int remainingCardGuess)
    + void correctGuess()
    + void wrongGuess()
    + int getNumberOfOpponentRemainingCardsToFind()
    + int getNumberOfRemainingCardsToFind()
}

class GameTwoTeams extends Game {
    - Image QRCode

    + Image getQRCode()
    + void setQRCode()
    + generateColorsString()
    + String generateURL()
    + void generateQRCode()
}

class GameSinglePlayer extends Game {
}

GameTwoTeamsController o--- GameTwoTeams

GameSinglePlayerController o- OpponentIA

interface OpponentIA

GameSinglePlayerController o--- GameSinglePlayer

Game o-- "2" Statistics

class Statistics {
    - double averageTimePerTurn
    - double averageCardsPerTurn
    - int numberOfErrors
    - int numberOfTurns
    - int numberOfGuess
    - int numberOfRemainingCardsToFind

    + Statistics(int numberOfCard)
    + int getNumberOfRemainingCardsToFind()
    + void decrNumberOfRemainingCardsToFind()
    + double getAverageTimePerTurn()
    + double getAverageCardsPerTurn()
    + int getNumberOfErrors()
    + void incrNumberOfErrors()
    + int getNumberOfTurns()
    + void incrNumberOfTurns()
    + void incrNumberOfGuess()
    + String toString() 
    + void calculStat()
}

@enduml
